
set nocompatible              " Disable VI compatibility
syntax enable                 " Syntax highlight
set number                    " Show line number
set encoding=utf-8 " Default file encoding
set clipboard=unnamed " Yank to the selection directly
set backspace=indent,eol,start " Backspace options
set textwidth=80 " Maximum line width
filetype plugin on            " File explorer
set path+=**                  " Include CWD for file searches
set wildmenu                  " Tab completion is shown on top of the command line
set foldmethod=indent         " Fold by indent
set foldnestmax=10            " Deepest fold level
set nofoldenable              " Do not fold by default
set foldlevel=2               " Default fold level
set expandtab                 " Indent with spaces by default
set tabstop=2                 " Number of spaces of a tab
set shiftwidth=2              " Number of spaces of indent
" Thesaurus file
set thesaurus=${FILE_THESAURUS}
command! MakeTags !ctags -R . " Help command to create tags file

let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()

""""" MAPPINGS
let mapleader = " "
let g:BASH_Ctrl_j = 'off'

""" Pane navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"Fix from: https://github.com/neovim/neovim/issues/2048#issuecomment-78534227
nnoremap <BS> <C-w>h

nnoremap <silent> <Leader>n :NERDTreeToggle<CR> <C-w>=
nnoremap <silent> <Leader>nf :NERDTreeFind<CR> <C-w>=

"Note: Do not use nnoremap when using <Plug>!
nmap <Leader>l <Plug>(ale_lint)
nmap <Leader>f <Plug>(ale_fix)
nmap <Leader><BS> <Plug>(ale_reset_buffer)

nmap [g <Plug>(GitGutterPrevHunk)
nmap ]g <Plug>(GitGutterNextHunk)
nmap <Leader>p <Plug>(GitGutterPreviewHunk)
nmap <Leader>+ <Plug>(GitGutterStageHunk)
nmap <Leader>- <Plug>(GitGutterUndoHunk)

" inoremap <silent> <C-j> <C-r>=LoadUltiSnipsAndExpand()<CR>

""""" PLUGINS
call plug#begin('~/.vim/plugged')

" NERD tree
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
let NERDTreeHijackNetrw = 0

" Align all lines around a character ("gl=" will do it around =)
Plug 'tommcdo/vim-lion'
let g:lion_squeeze_spaces = 1

" Additional text objects
Plug 'wellle/targets.vim'
Plug 'michaeljsmith/vim-indent-object'

" Indentation help
Plug 'Yggdroot/indentLine'
let g:indentLine_faster     = 1
let g:indentLine_setConceal = 0

" Language packs
Plug 'sheerun/vim-polyglot'

" Linting and fixing tools
Plug 'w0rp/ale'
let g:ale_fixers = {
       \  'css':        ['prettier'],
       \  'javascript': ['prettier-standard'],
       \  'json':       ['prettier'],
       \  'ruby':       ['standardrb'],
       \  'scss':       ['prettier'],
       \  'yml':        ['prettier'],
       \  'python':     ['autopep8'],
       \}
let g:ale_linters = {
       \  'css':        ['csslint'],
       \  'javascript': ['standard'],
       \  'json':       ['jsonlint'],
       \  'ruby':       ['standardrb'],
       \  'scss':       ['sasslint'],
       \  'yaml':       ['yamllint'],
       \  'python':     ['pylint'],
       \}
let g:ale_lint_on_enter            = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_insert_leave     = 0
let g:ale_lint_on_save             = 0
let g:ale_lint_on_text_changed     = 'never'

" Git indicators
Plug 'airblade/vim-gitgutter'
"let g:gitgutter_grep                    = 'rg'
let g:gitgutter_map_keys                = 0
let g:gitgutter_sign_added              = '▎'
let g:gitgutter_sign_modified           = '▎'
let g:gitgutter_sign_modified_removed   = '▶'
let g:gitgutter_sign_removed            = '▶'
let g:gitgutter_sign_removed_first_line = '◥'

Plug '907th/vim-auto-save'
let g:auto_save        = 1
let g:auto_save_silent = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "FocusLost"]

" Commenting lines with 'gc'
Plug 'tpope/vim-commentary'
" Automatic indent configuration
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

call plug#end()
